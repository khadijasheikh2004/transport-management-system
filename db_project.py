# -*- coding: utf-8 -*-
"""db project

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LfoopeM4mVVNd87LuZL2HriZRwcXuM9V
"""

import random

# Pakistani first names
pakistani_first_names = [
    "Ahmed", "Ali", "Hassan", "Hussain", "Mohammed",
    "Fatima", "Aisha", "Sana", "Saima", "Ayesha",
    "Usman", "Farhan", "Bilal", "Zainab", "Sumaira",
    "Amir", "Asma", "Sara", "Nida", "Amina",
    "Khadija", "Tahir", "Imran", "Sajjad", "Nasir",
    "Naeem", "Shoaib", "Adeel", "Sadia", "Samina"
]

# Pakistani last names
pakistani_last_names = [
    "Khan", "Raza", "Ali", "Ahmed", "Akhtar",
    "Bibi", "Siddiqui", "Khan", "Akram", "Aslam",
    "Ghani", "Malik", "Khan", "Fatima", "Akhtar",
    "Khan", "Bano", "Nadeem", "Aslam", "Iqbal",
    "Siddiqui", "Mahmood", "Ali", "Khan", "Khan",
    "Ahmed", "Malik", "Ahmad", "Javed", "Khan"
]

# Phone number prefixes
phone_prefixes = [
    "3000", "0300", "0301", "0302", "0303", "0304", "0305", "0306", "0307", "0308", "0309",
    "0340", "0341", "0342", "0343", "0344", "0345", "0346", "0347", "0348", "0349",
    "0330", "0331", "0332", "0333", "0334", "0335", "0336", "0337",
    "0320", "0321", "0322", "0323", "0324", "0325",
    "0311", "0312", "0313", "0314", "0315", "0316", "0317",
    "0355", "0355"
]

# Generate 20 records
records = []
for i in range(1, 21):
    driver_id = i
    first_name = random.choice(pakistani_first_names)
    last_name = random.choice(pakistani_last_names)
    full_name = f"{first_name} {last_name}"
    phone_no = random.choice(phone_prefixes) + ''.join(random.choices('0123456789', k=7))
    records.append({"driver_id": driver_id, "driver_name": full_name, "phone_no": phone_no})

# Print the generated records
for record in records:
    print(record)

# Print the generated SQL commands
for record in records:
    print(f"INSERT INTO Driver (driver_id, driver_name, phone_no) VALUES ({record['driver_id']}, '{record['driver_name']}', '{record['phone_no']}');")

import random
import string

# List of company names
bus_company_names = [
    "Isuzu Motors", "Volvo Buses", "Ashok Leyland", "Scania AB", "Mercedes-Benz",
    "MAN Truck & Bus", "Daimler AG", "Yutong Group", "Hino Motors", "Marcopolo S.A.",
    "Tata Motors", "Mitsubishi Fuso", "Zhongtong Bus", "Solaris Bus & Coach", "VDL Bus & Coach",
    "IVECO Bus", "BYD Company", "Van Hool", "King Long", "Ankai",
    "JAC Motors", "Wrightbus", "New Flyer Industries", "Optare", "Alexander Dennis",
    "Blue Bird Corporation", "Gillig Corporation", "Nova Bus", "Prevost", "Proterra"
]

# List of bus models
bus_models = [
    "A1", "B2", "C3", "D4", "E5", "F6", "G7", "H8", "I9", "J10",
    "K11", "L12", "M13", "N14", "O15", "P16", "Q17", "R18", "S19", "T20",
    "U21", "V22", "W23", "X24", "Y25", "Z26", "AA27", "BB28", "CC29", "DD30",
    "EE31", "FF32", "GG33", "HH34", "II35", "JJ36", "KK37", "LL38", "MM39", "NN40",
    "OO41", "PP42", "QQ43", "RR44", "SS45", "TT46", "UU47", "VV48", "WW49", "XX50"
]

# List of driver IDs (assuming you have 20 drivers)
driver_ids = list(range(1, 21))

# Generate 15 records
records = []
random.shuffle(driver_ids)  # Shuffle driver IDs to ensure each bus has a unique driver
for i in range(1, 16):
    bus_id = i
    company_name = random.choice(bus_company_names)
    model = random.choice(bus_models)
    license_plate = ''.join(random.choices(string.ascii_uppercase, k=3)) + ''.join(random.choices(string.digits, k=3))
    driver_id = driver_ids.pop()
    records.append({"bus_id": bus_id, "company_name": company_name, "model": model, "license_plate": license_plate, "driver_id": driver_id})

# Print the generated records
for record in records:
    print(record)

# Print the generated SQL commands
for record in records:
    print(f"INSERT INTO Bus (bus_id, company_name, model, license_plate, driver_id) VALUES ({record['bus_id']}, '{record['company_name']}', '{record['model']}', '{record['license_plate']}', {record['driver_id']});")

import random

# Generate 15 records for the Routes table with route names and fees
routes_records = [{"route_id": i, "route_name": f"Route No. {i}", "fee": random.randint(10, 35) * 1000} for i in range(1, 16)]

# Print the generated records
for record in routes_records:
    print(record)

# Print the generated SQL commands
for record in routes_records:
    print(f"INSERT INTO Routes (route_id, route_name, fee) VALUES ({record['route_id']}, '{record['route_name']}', {record['fee']});")

import random

# List of stop names
stop_names = [
    "Muredky", "Rana Town", "Shahdra Round About", "Ahmad Travel", "Sanda", "Shera Kot",
    "Motorway Babu Sabu", "Thokar Niaz Baig", "EME Canal Road", "Jubilee Town",
    "Barkat Town", "Batii Chowk", "Yadgaar", "Bhatti", "MAO College",
    "Chuburji", "Samanabad Mor", "Chowk Yattem Khana", "Scheme Mor", "Moon Market",
    "Bekhywal Mor", "Multan Chungi", "Raiwind Road", "Qazlabash Chowk", "Manoo Chowk",
    "Gulshan Ravi", "Assembly Hall", "Ganga Ram Hospital", "Mozang Chungi", "Ichhra",
    "Muslim Town Mor", "Campus Bridge", "Jinnah Hospital", "Allah Hoo Chowk", "Shadewal Chowk",
    "UCP", "Shimla Hill", "Railway Station", "Askari 10", "Joray Pull",
    "Sadar Cantt", "Tufail Road", "R.A. Bazar", "Cavalary Ground", "Firdous Market",
    "Kalma Chowk", "Faisal Town Round About", "Shakam Chowk", "Shoukat Khanam", "Rehman Chowk",
    "New Bridge", "Harbans Pura", "Darogha Wala", "Pakistan Mint", "Shalimar Garden",
    "UET", "Garhi Shaho", "Dharam Pura", "Nursery Stop", "Shoukat Khanam Chowk",
    "Shimla Pahari", "Main Market Gulberg", "Ittefaq Hospital", "Model Town Link Road",
    "Al Karim Chowk", "Chandani Chowk", "Abu Bakar Round About", "Valencia"
]

# Generate 100 records for the RouteStops table
route_stops_records = []
stop_id = 1
while stop_id <= 100:
    route_id = random.randint(1, 15)
    stop_name = random.choice(stop_names)
    route_stops_records.append({"stop_id": stop_id, "stop_name": stop_name, "route_id": route_id})
    stop_id += 1

# Print the generated records
for record in route_stops_records:
    print(record)

# Print the generated SQL commands
for record in route_stops_records:
    print(f"INSERT INTO RouteStops (route_stop_id, stop_name, route_id) VALUES ({record['stop_id']}, '{record['stop_name']}', {record['route_id']});")

import random

# List of Pakistani first names
first_names = [
    "Aamir", "Bilal", "Farhan", "Hassan", "Imran", "Junaid", "Kashif",
    "Naveed", "Omar", "Qasim", "Rehan", "Saad", "Tariq", "Usman",
    "Waqar", "Yasir", "Zeeshan", "Ahmed", "Asad", "Basit",
    "Ayesha", "Fatima", "Khadija", "Mariam", "Nadia", "Rabia",
    "Sana", "Sara", "Zara", "Hina", "Iqra", "Kiran", "Lubna",
    "Mehwish", "Nida", "Rida", "Saira", "Sania", "Uzma", "Zainab"
]

# List of Pakistani last names
last_names = [
    "Ali", "Khan", "Malik", "Ahmed", "Shaikh", "Hussain", "Chaudhry",
    "Butt", "Awan", "Qureshi", "Rana", "Gill", "Javed", "Raza",
    "Saeed", "Sharif", "Siddiqui", "Ansari", "Farooq", "Sultan",
    "Mirza", "Bajwa", "Rizvi", "Mughal", "Mir", "Naqvi", "Syed",
    "Abbasi", "Rajput", "Shah", "Dar", "Sheikh", "Ghani", "Kazmi",
    "Tariq", "Waris", "Zafar", "Yousaf", "Latif", "Sattar"
]

# List of phone number prefixes
phone_prefixes = [
    "0300", "0301", "0302", "0303", "0304", "0305", "0306", "0307", "0308", "0309",
    "0340", "0341", "0342", "0343", "0344", "0345", "0346", "0347", "0348", "0349",
    "0330", "0331", "0332", "0333", "0334", "0335", "0336", "0337", "0320", "0321",
    "0322", "0323", "0324", "0325", "0311", "0312", "0313", "0314", "0315", "0316",
    "0317", "0355", "0356"
]

# Generate 300 records for the Student table
student_records = []
used_names = set()
for st_id in range(1, 301):
    while True:
        st_name = f"{random.choice(first_names)} {random.choice(last_names)}"
        if st_name not in used_names:
            used_names.add(st_name)
            break
    phone_no = f"{random.choice(phone_prefixes)}{random.randint(1000000, 9999999)}"
    route_stop_id = random.randint(1, 100)
    student_records.append({"st_id": st_id, "st_name": st_name, "phone_no": phone_no, "route_stop_id": route_stop_id})

# Print the generated records
for record in student_records:
    print(record)

# Print the generated SQL commands
for record in student_records:
    print(f"INSERT INTO Student (st_id, st_name, phone_no, route_stop_id) VALUES ({record['st_id']}, '{record['st_name']}', '{record['phone_no']}', {record['route_stop_id']});")

import random
from datetime import datetime, timedelta

# List of semesters with their corresponding date ranges
semester_date_ranges = {
    "SP24": ("2024-02-01", "2024-02-28"),
    "FA23": ("2023-09-01", "2023-09-30"),
    "SP23": ("2023-02-01", "2023-02-28")
}

# Generate 550 records for the Bookings table
booking_records = []
booking_id = 1

# Define the number of buses and routes
num_buses = 15
num_routes = 15

# Track bookings per student to ensure all students have at least one booking and no duplicate semesters
student_bookings = {st_id: set() for st_id in range(1, 301)}

# Ensure all students have at least one booking
for st_id in range(1, 301):
    semester = random.choice(list(semester_date_ranges.keys()))
    student_bookings[st_id].add(semester)

    start_date, end_date = semester_date_ranges[semester]
    start_dt = datetime.strptime(start_date, "%Y-%m-%d")
    end_dt = datetime.strptime(end_date, "%Y-%m-%d")
    random_date = start_dt + timedelta(days=random.randint(0, (end_dt - start_dt).days))
    random_time = timedelta(hours=random.randint(0, 23), minutes=random.randint(0, 59), seconds=random.randint(0, 59))
    booking_date_time = random_date + random_time

    bus_id = random.randint(1, num_buses)
    route_id = bus_id  # Ensuring one-to-one relationship between bus_id and route_id
    booking_records.append({
        "booking_id": booking_id,
        "booking_date_time": booking_date_time.strftime("%Y-%m-%d %H:%M:%S"),
        "semester": semester,
        "st_id": st_id,
        "route_id": route_id,
        "bus_id": bus_id
    })
    booking_id += 1

# Generate additional bookings to reach 550 records
while len(booking_records) < 550:
    st_id = random.randint(1, 300)
    available_semesters = [sem for sem in semester_date_ranges if sem not in student_bookings[st_id]]
    if not available_semesters:
        continue  # Skip if no available semesters for this student

    semester = random.choice(available_semesters)
    student_bookings[st_id].add(semester)

    start_date, end_date = semester_date_ranges[semester]
    start_dt = datetime.strptime(start_date, "%Y-%m-%d")
    end_dt = datetime.strptime(end_date, "%Y-%m-%d")
    random_date = start_dt + timedelta(days=random.randint(0, (end_dt - start_dt).days))
    random_time = timedelta(hours=random.randint(0, 23), minutes=random.randint(0, 59), seconds=random.randint(0, 59))
    booking_date_time = random_date + random_time

    bus_id = random.randint(1, num_buses)
    route_id = bus_id  # Ensuring one-to-one relationship between bus_id and route_id
    booking_records.append({
        "booking_id": booking_id,
        "booking_date_time": booking_date_time.strftime("%Y-%m-%d %H:%M:%S"),
        "semester": semester,
        "st_id": st_id,
        "route_id": route_id,
        "bus_id": bus_id
    })
    booking_id += 1

# Print the generated records
for record in booking_records:
    print(record)

# Print the generated SQL commands
for record in booking_records:
    print(f"INSERT INTO Bookings (booking_id, booking_date_time, semester, st_id, route_id, bus_id) VALUES ({record['booking_id']}, '{record['booking_date_time']}', '{record['semester']}', {record['st_id']}, {record['route_id']}, {record['bus_id']});")